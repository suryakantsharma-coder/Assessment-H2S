{"ast":null,"code":"var _jsxFileName = \"/Users/suryakant/Desktop/Disk/assignment/product-dashboard/src/context/AppContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useCallback, useMemo } from 'react';\nimport { products as mockProducts } from '../constant/mockProducts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext();\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  const [products] = useState(mockProducts);\n  const [cart, setCart] = useState(() => [{\n    ...mockProducts[0],\n    qty: 1\n  }, {\n    ...mockProducts[1],\n    qty: 2\n  }]);\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const addToCart = useCallback(product => {\n    setCart(prev => {\n      const existingIndex = prev.findIndex(p => p.id === product.id);\n      if (existingIndex >= 0) {\n        const updated = [...prev];\n        updated[existingIndex] = {\n          ...updated[existingIndex],\n          qty: updated[existingIndex].qty + 1\n        };\n        return updated;\n      }\n      return [...prev, {\n        ...product,\n        qty: 1\n      }];\n    });\n  }, []);\n  const updateQty = useCallback((id, qty) => {\n    setCart(prev => prev.map(p => p.id === id ? {\n      ...p,\n      qty\n    } : p));\n  }, []);\n  const removeItem = useCallback(id => {\n    setCart(prev => prev.filter(p => p.id !== id));\n  }, []);\n  const value = useMemo(() => ({\n    products,\n    cart,\n    isCartOpen,\n    setIsCartOpen,\n    addToCart,\n    updateQty,\n    removeItem\n  }), [products, cart, isCartOpen, addToCart, updateQty, removeItem]);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 10\n  }, this);\n};\n_s(AppProvider, \"o3gDld7hrDEkafuRpw7aN8SwxmM=\");\n_c = AppProvider;\nexport default AppProvider;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useState","useCallback","useMemo","products","mockProducts","jsxDEV","_jsxDEV","AppContext","AppProvider","children","_s","cart","setCart","qty","isCartOpen","setIsCartOpen","addToCart","product","prev","existingIndex","findIndex","p","id","updated","updateQty","map","removeItem","filter","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/suryakant/Desktop/Disk/assignment/product-dashboard/src/context/AppContext.js"],"sourcesContent":["import React, { createContext, useState, useCallback, useMemo } from 'react';\nimport { products as mockProducts } from '../constant/mockProducts';\n\nexport const AppContext = createContext();\n\nexport const AppProvider = ({ children }) => {\n  const [products] = useState(mockProducts);\n\n  const [cart, setCart] = useState(() => [\n    { ...mockProducts[0], qty: 1 },\n    { ...mockProducts[1], qty: 2 },\n  ]);\n\n  const [isCartOpen, setIsCartOpen] = useState(false);\n\n  const addToCart = useCallback((product) => {\n    setCart((prev) => {\n      const existingIndex = prev.findIndex((p) => p.id === product.id);\n      if (existingIndex >= 0) {\n        const updated = [...prev];\n        updated[existingIndex] = { ...updated[existingIndex], qty: updated[existingIndex].qty + 1 };\n        return updated;\n      }\n      return [...prev, { ...product, qty: 1 }];\n    });\n  }, []);\n\n  const updateQty = useCallback((id, qty) => {\n    setCart((prev) => prev.map((p) => (p.id === id ? { ...p, qty } : p)));\n  }, []);\n\n  const removeItem = useCallback((id) => {\n    setCart((prev) => prev.filter((p) => p.id !== id));\n  }, []);\n\n  const value = useMemo(\n    () => ({\n      products,\n      cart,\n      isCartOpen,\n      setIsCartOpen,\n      addToCart,\n      updateQty,\n      removeItem,\n    }),\n    [products, cart, isCartOpen, addToCart, updateQty, removeItem],\n  );\n\n  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;\n};\n\nexport default AppProvider;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,OAAO,QAAQ,OAAO;AAC5E,SAASC,QAAQ,IAAIC,YAAY,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpE,OAAO,MAAMC,UAAU,gBAAGR,aAAa,CAAC,CAAC;AAEzC,OAAO,MAAMS,WAAW,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACP,QAAQ,CAAC,GAAGH,QAAQ,CAACI,YAAY,CAAC;EAEzC,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,MAAM,CACrC;IAAE,GAAGI,YAAY,CAAC,CAAC,CAAC;IAAES,GAAG,EAAE;EAAE,CAAC,EAC9B;IAAE,GAAGT,YAAY,CAAC,CAAC,CAAC;IAAES,GAAG,EAAE;EAAE,CAAC,CAC/B,CAAC;EAEF,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMgB,SAAS,GAAGf,WAAW,CAAEgB,OAAO,IAAK;IACzCL,OAAO,CAAEM,IAAI,IAAK;MAChB,MAAMC,aAAa,GAAGD,IAAI,CAACE,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;MAChE,IAAIH,aAAa,IAAI,CAAC,EAAE;QACtB,MAAMI,OAAO,GAAG,CAAC,GAAGL,IAAI,CAAC;QACzBK,OAAO,CAACJ,aAAa,CAAC,GAAG;UAAE,GAAGI,OAAO,CAACJ,aAAa,CAAC;UAAEN,GAAG,EAAEU,OAAO,CAACJ,aAAa,CAAC,CAACN,GAAG,GAAG;QAAE,CAAC;QAC3F,OAAOU,OAAO;MAChB;MACA,OAAO,CAAC,GAAGL,IAAI,EAAE;QAAE,GAAGD,OAAO;QAAEJ,GAAG,EAAE;MAAE,CAAC,CAAC;IAC1C,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMW,SAAS,GAAGvB,WAAW,CAAC,CAACqB,EAAE,EAAET,GAAG,KAAK;IACzCD,OAAO,CAAEM,IAAI,IAAKA,IAAI,CAACO,GAAG,CAAEJ,CAAC,IAAMA,CAAC,CAACC,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGD,CAAC;MAAER;IAAI,CAAC,GAAGQ,CAAE,CAAC,CAAC;EACvE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,UAAU,GAAGzB,WAAW,CAAEqB,EAAE,IAAK;IACrCV,OAAO,CAAEM,IAAI,IAAKA,IAAI,CAACS,MAAM,CAAEN,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKA,EAAE,CAAC,CAAC;EACpD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,KAAK,GAAG1B,OAAO,CACnB,OAAO;IACLC,QAAQ;IACRQ,IAAI;IACJG,UAAU;IACVC,aAAa;IACbC,SAAS;IACTQ,SAAS;IACTE;EACF,CAAC,CAAC,EACF,CAACvB,QAAQ,EAAEQ,IAAI,EAAEG,UAAU,EAAEE,SAAS,EAAEQ,SAAS,EAAEE,UAAU,CAC/D,CAAC;EAED,oBAAOpB,OAAA,CAACC,UAAU,CAACsB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAnB,QAAA,EAAEA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAsB,CAAC;AAC5E,CAAC;AAACvB,EAAA,CA5CWF,WAAW;AAAA0B,EAAA,GAAX1B,WAAW;AA8CxB,eAAeA,WAAW;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}