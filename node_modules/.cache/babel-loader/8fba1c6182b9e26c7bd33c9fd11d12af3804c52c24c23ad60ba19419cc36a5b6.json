{"ast":null,"code":"const categories = [\"Electronics\", \"Clothing\", \"Books\", \"Furniture\", \"Sports\", \"Toys\"];\nconst getStatus = stock => stock > 0 ? \"In Stock\" : \"Out of Stock\";\nconst randomPrice = (min = 10, max = 2000) => parseFloat((Math.random() * (max - min) + min).toFixed(2));\nexport const generateMockProducts = count => {\n  return Array.from({\n    length: count\n  }, (_, i) => {\n    const stock = Math.floor(Math.random() * 100);\n    return {\n      id: i + 1,\n      image: `https://picsum.photos/seed/product${i + 1}/50/50`,\n      // unique image per product\n      name: `Product ${i + 1}`,\n      category: categories[Math.floor(Math.random() * categories.length)],\n      price: randomPrice(),\n      stock,\n      status: getStatus(stock)\n    };\n  });\n};\n\n// Use 1000 records for real testing\nexport const products = generateMockProducts(1000);\n\n// Use smaller set for quick UI testing (comment/uncomment)\n// export const products = generateMockProducts(20);","map":{"version":3,"names":["categories","getStatus","stock","randomPrice","min","max","parseFloat","Math","random","toFixed","generateMockProducts","count","Array","from","length","_","i","floor","id","image","name","category","price","status","products"],"sources":["/Users/suryakant/Desktop/Disk/assignment/product-dashboard/src/constant/mockProducts.js"],"sourcesContent":["const categories = [\"Electronics\", \"Clothing\", \"Books\", \"Furniture\", \"Sports\", \"Toys\"];\n\nconst getStatus = (stock) => (stock > 0 ? \"In Stock\" : \"Out of Stock\");\n\nconst randomPrice = (min = 10, max = 2000) =>\n  parseFloat((Math.random() * (max - min) + min).toFixed(2));\n\nexport const generateMockProducts = (count) => {\n  return Array.from({ length: count }, (_, i) => {\n    const stock = Math.floor(Math.random() * 100);\n    return {\n      id: i + 1,\n      image: `https://picsum.photos/seed/product${i + 1}/50/50`, // unique image per product\n      name: `Product ${i + 1}`,\n      category: categories[Math.floor(Math.random() * categories.length)],\n      price: randomPrice(),\n      stock,\n      status: getStatus(stock)\n    };\n  });\n};\n\n// Use 1000 records for real testing\nexport const products = generateMockProducts(1000);\n\n// Use smaller set for quick UI testing (comment/uncomment)\n// export const products = generateMockProducts(20);\n"],"mappings":"AAAA,MAAMA,UAAU,GAAG,CAAC,aAAa,EAAE,UAAU,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,CAAC;AAEtF,MAAMC,SAAS,GAAIC,KAAK,IAAMA,KAAK,GAAG,CAAC,GAAG,UAAU,GAAG,cAAe;AAEtE,MAAMC,WAAW,GAAGA,CAACC,GAAG,GAAG,EAAE,EAAEC,GAAG,GAAG,IAAI,KACvCC,UAAU,CAAC,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIH,GAAG,GAAGD,GAAG,CAAC,GAAGA,GAAG,EAAEK,OAAO,CAAC,CAAC,CAAC,CAAC;AAE5D,OAAO,MAAMC,oBAAoB,GAAIC,KAAK,IAAK;EAC7C,OAAOC,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAEH;EAAM,CAAC,EAAE,CAACI,CAAC,EAAEC,CAAC,KAAK;IAC7C,MAAMd,KAAK,GAAGK,IAAI,CAACU,KAAK,CAACV,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;IAC7C,OAAO;MACLU,EAAE,EAAEF,CAAC,GAAG,CAAC;MACTG,KAAK,EAAE,qCAAqCH,CAAC,GAAG,CAAC,QAAQ;MAAE;MAC3DI,IAAI,EAAE,WAAWJ,CAAC,GAAG,CAAC,EAAE;MACxBK,QAAQ,EAAErB,UAAU,CAACO,IAAI,CAACU,KAAK,CAACV,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGR,UAAU,CAACc,MAAM,CAAC,CAAC;MACnEQ,KAAK,EAAEnB,WAAW,CAAC,CAAC;MACpBD,KAAK;MACLqB,MAAM,EAAEtB,SAAS,CAACC,KAAK;IACzB,CAAC;EACH,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMsB,QAAQ,GAAGd,oBAAoB,CAAC,IAAI,CAAC;;AAElD;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}